{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useNumberFieldRootContext } from '../root/NumberFieldRootContext.js';\nimport { useComponentRenderer } from '../../utils/useComponentRenderer.js';\n/**\n * Groups the input with the increment and decrement buttons.\n * Renders a `<div>` element.\n *\n * Documentation: [Base UI Number Field](https://base-ui.com/react/components/number-field)\n */\nconst NumberFieldGroup = /*#__PURE__*/React.forwardRef(function NumberFieldGroup(props, forwardedRef) {\n  const {\n    render,\n    className,\n    ...otherProps\n  } = props;\n  const {\n    getGroupProps,\n    state\n  } = useNumberFieldRootContext();\n  const {\n    renderElement\n  } = useComponentRenderer({\n    propGetter: getGroupProps,\n    ref: forwardedRef,\n    render: render ?? 'div',\n    state,\n    className,\n    extraProps: otherProps\n  });\n  return renderElement();\n});\nprocess.env.NODE_ENV !== \"production\" ? NumberFieldGroup.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * CSS class applied to the element, or a function that\n   * returns a class based on the component’s state.\n   */\n  className: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  /**\n   * Allows you to replace the component’s HTML element\n   * with a different tag, or compose it with another component.\n   *\n   * Accepts a `ReactElement` or a function that returns the element to render.\n   */\n  render: PropTypes.oneOfType([PropTypes.element, PropTypes.func])\n} : void 0;\nexport { NumberFieldGroup };","map":{"version":3,"names":["React","PropTypes","useNumberFieldRootContext","useComponentRenderer","NumberFieldGroup","forwardRef","props","forwardedRef","render","className","otherProps","getGroupProps","state","renderElement","propGetter","ref","extraProps","process","env","NODE_ENV","propTypes","children","node","oneOfType","func","string","element"],"sources":["/Users/bobbycrew/Documents/Uni/Second Year/Car-Auction-Site-Y2--main/Frontend/node_modules/@base-ui-components/react/esm/number-field/group/NumberFieldGroup.js"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useNumberFieldRootContext } from '../root/NumberFieldRootContext.js';\nimport { useComponentRenderer } from '../../utils/useComponentRenderer.js';\n/**\n * Groups the input with the increment and decrement buttons.\n * Renders a `<div>` element.\n *\n * Documentation: [Base UI Number Field](https://base-ui.com/react/components/number-field)\n */\nconst NumberFieldGroup = /*#__PURE__*/React.forwardRef(function NumberFieldGroup(props, forwardedRef) {\n  const {\n    render,\n    className,\n    ...otherProps\n  } = props;\n  const {\n    getGroupProps,\n    state\n  } = useNumberFieldRootContext();\n  const {\n    renderElement\n  } = useComponentRenderer({\n    propGetter: getGroupProps,\n    ref: forwardedRef,\n    render: render ?? 'div',\n    state,\n    className,\n    extraProps: otherProps\n  });\n  return renderElement();\n});\nprocess.env.NODE_ENV !== \"production\" ? NumberFieldGroup.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * CSS class applied to the element, or a function that\n   * returns a class based on the component’s state.\n   */\n  className: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  /**\n   * Allows you to replace the component’s HTML element\n   * with a different tag, or compose it with another component.\n   *\n   * Accepts a `ReactElement` or a function that returns the element to render.\n   */\n  render: PropTypes.oneOfType([PropTypes.element, PropTypes.func])\n} : void 0;\nexport { NumberFieldGroup };"],"mappings":"AAAA,YAAY;;AAEZ,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,yBAAyB,QAAQ,mCAAmC;AAC7E,SAASC,oBAAoB,QAAQ,qCAAqC;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,gBAAgB,GAAG,aAAaJ,KAAK,CAACK,UAAU,CAAC,SAASD,gBAAgBA,CAACE,KAAK,EAAEC,YAAY,EAAE;EACpG,MAAM;IACJC,MAAM;IACNC,SAAS;IACT,GAAGC;EACL,CAAC,GAAGJ,KAAK;EACT,MAAM;IACJK,aAAa;IACbC;EACF,CAAC,GAAGV,yBAAyB,CAAC,CAAC;EAC/B,MAAM;IACJW;EACF,CAAC,GAAGV,oBAAoB,CAAC;IACvBW,UAAU,EAAEH,aAAa;IACzBI,GAAG,EAAER,YAAY;IACjBC,MAAM,EAAEA,MAAM,IAAI,KAAK;IACvBI,KAAK;IACLH,SAAS;IACTO,UAAU,EAAEN;EACd,CAAC,CAAC;EACF,OAAOG,aAAa,CAAC,CAAC;AACxB,CAAC,CAAC;AACFI,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAGf,gBAAgB,CAACgB,SAAS,CAAC,yBAAyB;EAC1F;EACA;EACA;EACA;EACA;AACF;AACA;EACEC,QAAQ,EAAEpB,SAAS,CAACqB,IAAI;EACxB;AACF;AACA;AACA;EACEb,SAAS,EAAER,SAAS,CAACsB,SAAS,CAAC,CAACtB,SAAS,CAACuB,IAAI,EAAEvB,SAAS,CAACwB,MAAM,CAAC,CAAC;EAClE;AACF;AACA;AACA;AACA;AACA;EACEjB,MAAM,EAAEP,SAAS,CAACsB,SAAS,CAAC,CAACtB,SAAS,CAACyB,OAAO,EAAEzB,SAAS,CAACuB,IAAI,CAAC;AACjE,CAAC,GAAG,KAAK,CAAC;AACV,SAASpB,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}