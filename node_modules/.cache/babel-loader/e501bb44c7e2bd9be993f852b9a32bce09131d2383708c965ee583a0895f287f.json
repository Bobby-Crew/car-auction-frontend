{"ast":null,"code":"import * as ReactDOM from 'react-dom';\nimport { useEnhancedEffect } from '../utils/useEnhancedEffect.js';\nimport { getCombinedFieldValidityData } from './utils/getCombinedFieldValidityData.js';\nimport { useFormContext } from '../form/FormContext.js';\nimport { useFieldRootContext } from './root/FieldRootContext.js';\nimport { useLatestRef } from '../utils/useLatestRef.js';\nexport function useField(params) {\n  const {\n    formRef\n  } = useFormContext();\n  const {\n    invalid,\n    markedDirtyRef,\n    validityData,\n    setValidityData\n  } = useFieldRootContext();\n  const {\n    value,\n    id,\n    controlRef,\n    commitValidation\n  } = params;\n  const getValueRef = useLatestRef(params.getValue);\n  useEnhancedEffect(() => {\n    let initialValue = value;\n    if (initialValue === undefined) {\n      initialValue = getValueRef.current?.();\n    }\n    if (validityData.initialValue === null && initialValue !== validityData.initialValue) {\n      setValidityData(prev => ({\n        ...prev,\n        initialValue\n      }));\n    }\n  }, [setValidityData, value, validityData.initialValue, getValueRef]);\n  useEnhancedEffect(() => {\n    if (id) {\n      formRef.current.fields.set(id, {\n        controlRef,\n        validityData: getCombinedFieldValidityData(validityData, invalid),\n        validate() {\n          let nextValue = value;\n          if (nextValue === undefined) {\n            nextValue = getValueRef.current?.();\n          }\n          markedDirtyRef.current = true;\n          // Synchronously update the validity state so the submit event can be prevented.\n          ReactDOM.flushSync(() => commitValidation(nextValue));\n        }\n      });\n    }\n  }, [commitValidation, controlRef, formRef, getValueRef, id, invalid, markedDirtyRef, validityData, value]);\n}","map":{"version":3,"names":["ReactDOM","useEnhancedEffect","getCombinedFieldValidityData","useFormContext","useFieldRootContext","useLatestRef","useField","params","formRef","invalid","markedDirtyRef","validityData","setValidityData","value","id","controlRef","commitValidation","getValueRef","getValue","initialValue","undefined","current","prev","fields","set","validate","nextValue","flushSync"],"sources":["/Users/bobbycrew/Documents/Uni/Second Year/Car-Auction-Site-Y2--main/Frontend/node_modules/@base-ui-components/react/esm/field/useField.js"],"sourcesContent":["import * as ReactDOM from 'react-dom';\nimport { useEnhancedEffect } from '../utils/useEnhancedEffect.js';\nimport { getCombinedFieldValidityData } from './utils/getCombinedFieldValidityData.js';\nimport { useFormContext } from '../form/FormContext.js';\nimport { useFieldRootContext } from './root/FieldRootContext.js';\nimport { useLatestRef } from '../utils/useLatestRef.js';\nexport function useField(params) {\n  const {\n    formRef\n  } = useFormContext();\n  const {\n    invalid,\n    markedDirtyRef,\n    validityData,\n    setValidityData\n  } = useFieldRootContext();\n  const {\n    value,\n    id,\n    controlRef,\n    commitValidation\n  } = params;\n  const getValueRef = useLatestRef(params.getValue);\n  useEnhancedEffect(() => {\n    let initialValue = value;\n    if (initialValue === undefined) {\n      initialValue = getValueRef.current?.();\n    }\n    if (validityData.initialValue === null && initialValue !== validityData.initialValue) {\n      setValidityData(prev => ({\n        ...prev,\n        initialValue\n      }));\n    }\n  }, [setValidityData, value, validityData.initialValue, getValueRef]);\n  useEnhancedEffect(() => {\n    if (id) {\n      formRef.current.fields.set(id, {\n        controlRef,\n        validityData: getCombinedFieldValidityData(validityData, invalid),\n        validate() {\n          let nextValue = value;\n          if (nextValue === undefined) {\n            nextValue = getValueRef.current?.();\n          }\n          markedDirtyRef.current = true;\n          // Synchronously update the validity state so the submit event can be prevented.\n          ReactDOM.flushSync(() => commitValidation(nextValue));\n        }\n      });\n    }\n  }, [commitValidation, controlRef, formRef, getValueRef, id, invalid, markedDirtyRef, validityData, value]);\n}"],"mappings":"AAAA,OAAO,KAAKA,QAAQ,MAAM,WAAW;AACrC,SAASC,iBAAiB,QAAQ,+BAA+B;AACjE,SAASC,4BAA4B,QAAQ,yCAAyC;AACtF,SAASC,cAAc,QAAQ,wBAAwB;AACvD,SAASC,mBAAmB,QAAQ,4BAA4B;AAChE,SAASC,YAAY,QAAQ,0BAA0B;AACvD,OAAO,SAASC,QAAQA,CAACC,MAAM,EAAE;EAC/B,MAAM;IACJC;EACF,CAAC,GAAGL,cAAc,CAAC,CAAC;EACpB,MAAM;IACJM,OAAO;IACPC,cAAc;IACdC,YAAY;IACZC;EACF,CAAC,GAAGR,mBAAmB,CAAC,CAAC;EACzB,MAAM;IACJS,KAAK;IACLC,EAAE;IACFC,UAAU;IACVC;EACF,CAAC,GAAGT,MAAM;EACV,MAAMU,WAAW,GAAGZ,YAAY,CAACE,MAAM,CAACW,QAAQ,CAAC;EACjDjB,iBAAiB,CAAC,MAAM;IACtB,IAAIkB,YAAY,GAAGN,KAAK;IACxB,IAAIM,YAAY,KAAKC,SAAS,EAAE;MAC9BD,YAAY,GAAGF,WAAW,CAACI,OAAO,GAAG,CAAC;IACxC;IACA,IAAIV,YAAY,CAACQ,YAAY,KAAK,IAAI,IAAIA,YAAY,KAAKR,YAAY,CAACQ,YAAY,EAAE;MACpFP,eAAe,CAACU,IAAI,KAAK;QACvB,GAAGA,IAAI;QACPH;MACF,CAAC,CAAC,CAAC;IACL;EACF,CAAC,EAAE,CAACP,eAAe,EAAEC,KAAK,EAAEF,YAAY,CAACQ,YAAY,EAAEF,WAAW,CAAC,CAAC;EACpEhB,iBAAiB,CAAC,MAAM;IACtB,IAAIa,EAAE,EAAE;MACNN,OAAO,CAACa,OAAO,CAACE,MAAM,CAACC,GAAG,CAACV,EAAE,EAAE;QAC7BC,UAAU;QACVJ,YAAY,EAAET,4BAA4B,CAACS,YAAY,EAAEF,OAAO,CAAC;QACjEgB,QAAQA,CAAA,EAAG;UACT,IAAIC,SAAS,GAAGb,KAAK;UACrB,IAAIa,SAAS,KAAKN,SAAS,EAAE;YAC3BM,SAAS,GAAGT,WAAW,CAACI,OAAO,GAAG,CAAC;UACrC;UACAX,cAAc,CAACW,OAAO,GAAG,IAAI;UAC7B;UACArB,QAAQ,CAAC2B,SAAS,CAAC,MAAMX,gBAAgB,CAACU,SAAS,CAAC,CAAC;QACvD;MACF,CAAC,CAAC;IACJ;EACF,CAAC,EAAE,CAACV,gBAAgB,EAAED,UAAU,EAAEP,OAAO,EAAES,WAAW,EAAEH,EAAE,EAAEL,OAAO,EAAEC,cAAc,EAAEC,YAAY,EAAEE,KAAK,CAAC,CAAC;AAC5G","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}