{"ast":null,"code":"import { getFormatter } from '../../utils/formatNumber.js';\nimport { clamp } from '../../utils/clamp.js';\nexport function removeFloatingPointErrors(value, format = {}) {\n  return parseFloat(getFormatter('en-US', {\n    maximumFractionDigits: format.maximumFractionDigits,\n    minimumFractionDigits: format.minimumFractionDigits,\n    useGrouping: false\n  }).format(value));\n}\nexport function toValidatedNumber(value, {\n  step,\n  minWithDefault,\n  maxWithDefault,\n  minWithZeroDefault,\n  format\n}) {\n  if (value === null) {\n    return value;\n  }\n  const clampedValue = clamp(value, minWithDefault, maxWithDefault);\n\n  // Ensure values are divisible by the step, starting from the min value.\n  if (step != null) {\n    const stepsFromMin = (clampedValue - minWithZeroDefault) / step;\n    const roundedSteps = Math.round(stepsFromMin);\n    const snappedValue = minWithZeroDefault + roundedSteps * step;\n    return removeFloatingPointErrors(snappedValue, format);\n  }\n  return clampedValue;\n}","map":{"version":3,"names":["getFormatter","clamp","removeFloatingPointErrors","value","format","parseFloat","maximumFractionDigits","minimumFractionDigits","useGrouping","toValidatedNumber","step","minWithDefault","maxWithDefault","minWithZeroDefault","clampedValue","stepsFromMin","roundedSteps","Math","round","snappedValue"],"sources":["/Users/bobbycrew/Documents/Uni/Second Year/Car-Auction-Site-Y2--main/Frontend/node_modules/@base-ui-components/react/esm/number-field/utils/validate.js"],"sourcesContent":["import { getFormatter } from '../../utils/formatNumber.js';\nimport { clamp } from '../../utils/clamp.js';\nexport function removeFloatingPointErrors(value, format = {}) {\n  return parseFloat(getFormatter('en-US', {\n    maximumFractionDigits: format.maximumFractionDigits,\n    minimumFractionDigits: format.minimumFractionDigits,\n    useGrouping: false\n  }).format(value));\n}\nexport function toValidatedNumber(value, {\n  step,\n  minWithDefault,\n  maxWithDefault,\n  minWithZeroDefault,\n  format\n}) {\n  if (value === null) {\n    return value;\n  }\n  const clampedValue = clamp(value, minWithDefault, maxWithDefault);\n\n  // Ensure values are divisible by the step, starting from the min value.\n  if (step != null) {\n    const stepsFromMin = (clampedValue - minWithZeroDefault) / step;\n    const roundedSteps = Math.round(stepsFromMin);\n    const snappedValue = minWithZeroDefault + roundedSteps * step;\n    return removeFloatingPointErrors(snappedValue, format);\n  }\n  return clampedValue;\n}"],"mappings":"AAAA,SAASA,YAAY,QAAQ,6BAA6B;AAC1D,SAASC,KAAK,QAAQ,sBAAsB;AAC5C,OAAO,SAASC,yBAAyBA,CAACC,KAAK,EAAEC,MAAM,GAAG,CAAC,CAAC,EAAE;EAC5D,OAAOC,UAAU,CAACL,YAAY,CAAC,OAAO,EAAE;IACtCM,qBAAqB,EAAEF,MAAM,CAACE,qBAAqB;IACnDC,qBAAqB,EAAEH,MAAM,CAACG,qBAAqB;IACnDC,WAAW,EAAE;EACf,CAAC,CAAC,CAACJ,MAAM,CAACD,KAAK,CAAC,CAAC;AACnB;AACA,OAAO,SAASM,iBAAiBA,CAACN,KAAK,EAAE;EACvCO,IAAI;EACJC,cAAc;EACdC,cAAc;EACdC,kBAAkB;EAClBT;AACF,CAAC,EAAE;EACD,IAAID,KAAK,KAAK,IAAI,EAAE;IAClB,OAAOA,KAAK;EACd;EACA,MAAMW,YAAY,GAAGb,KAAK,CAACE,KAAK,EAAEQ,cAAc,EAAEC,cAAc,CAAC;;EAEjE;EACA,IAAIF,IAAI,IAAI,IAAI,EAAE;IAChB,MAAMK,YAAY,GAAG,CAACD,YAAY,GAAGD,kBAAkB,IAAIH,IAAI;IAC/D,MAAMM,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACH,YAAY,CAAC;IAC7C,MAAMI,YAAY,GAAGN,kBAAkB,GAAGG,YAAY,GAAGN,IAAI;IAC7D,OAAOR,yBAAyB,CAACiB,YAAY,EAAEf,MAAM,CAAC;EACxD;EACA,OAAOU,YAAY;AACrB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}