{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useNumberFieldRootContext } from '../root/NumberFieldRootContext.js';\nimport { useComponentRenderer } from '../../utils/useComponentRenderer.js';\nimport { useForkRef } from '../../utils/useForkRef.js';\n/**\n * An interactive area where the user can click and drag to change the field value.\n * Renders a `<div>` element.\n *\n * Documentation: [Base UI Number Field](https://base-ui.com/react/components/number-field)\n */\nconst NumberFieldScrubArea = /*#__PURE__*/React.forwardRef(function NumberFieldScrubArea(props, forwardedRef) {\n  const {\n    render,\n    className,\n    direction = 'horizontal',\n    pixelSensitivity = 2,\n    teleportDistance,\n    ...otherProps\n  } = props;\n  const {\n    getScrubAreaProps,\n    scrubAreaRef,\n    scrubHandleRef,\n    state\n  } = useNumberFieldRootContext();\n  React.useImperativeHandle(scrubHandleRef, () => ({\n    direction,\n    pixelSensitivity,\n    teleportDistance\n  }));\n  const mergedRef = useForkRef(scrubAreaRef, forwardedRef);\n  const {\n    renderElement\n  } = useComponentRenderer({\n    propGetter: getScrubAreaProps,\n    ref: mergedRef,\n    render: render ?? 'span',\n    state,\n    className,\n    extraProps: otherProps\n  });\n  return renderElement();\n});\nprocess.env.NODE_ENV !== \"production\" ? NumberFieldScrubArea.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * CSS class applied to the element, or a function that\n   * returns a class based on the component’s state.\n   */\n  className: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  /**\n   * Cursor movement direction in the scrub area.\n   * @default 'horizontal'\n   */\n  direction: PropTypes.oneOf(['horizontal', 'vertical']),\n  /**\n   * Determines how many pixels the cursor must move before the value changes.\n   * A higher value will make scrubbing less sensitive.\n   * @default 2\n   */\n  pixelSensitivity: PropTypes.number,\n  /**\n   * Allows you to replace the component’s HTML element\n   * with a different tag, or compose it with another component.\n   *\n   * Accepts a `ReactElement` or a function that returns the element to render.\n   */\n  render: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\n  /**\n   * If specified, determines the distance that the cursor may move from the center\n   * of the scrub area before it will loop back around.\n   */\n  teleportDistance: PropTypes.number\n} : void 0;\nexport { NumberFieldScrubArea };","map":{"version":3,"names":["React","PropTypes","useNumberFieldRootContext","useComponentRenderer","useForkRef","NumberFieldScrubArea","forwardRef","props","forwardedRef","render","className","direction","pixelSensitivity","teleportDistance","otherProps","getScrubAreaProps","scrubAreaRef","scrubHandleRef","state","useImperativeHandle","mergedRef","renderElement","propGetter","ref","extraProps","process","env","NODE_ENV","propTypes","children","node","oneOfType","func","string","oneOf","number","element"],"sources":["/Users/bobbycrew/Documents/Uni/Second Year/Car-Auction-Site-Y2--main/Frontend/node_modules/@base-ui-components/react/esm/number-field/scrub-area/NumberFieldScrubArea.js"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useNumberFieldRootContext } from '../root/NumberFieldRootContext.js';\nimport { useComponentRenderer } from '../../utils/useComponentRenderer.js';\nimport { useForkRef } from '../../utils/useForkRef.js';\n/**\n * An interactive area where the user can click and drag to change the field value.\n * Renders a `<div>` element.\n *\n * Documentation: [Base UI Number Field](https://base-ui.com/react/components/number-field)\n */\nconst NumberFieldScrubArea = /*#__PURE__*/React.forwardRef(function NumberFieldScrubArea(props, forwardedRef) {\n  const {\n    render,\n    className,\n    direction = 'horizontal',\n    pixelSensitivity = 2,\n    teleportDistance,\n    ...otherProps\n  } = props;\n  const {\n    getScrubAreaProps,\n    scrubAreaRef,\n    scrubHandleRef,\n    state\n  } = useNumberFieldRootContext();\n  React.useImperativeHandle(scrubHandleRef, () => ({\n    direction,\n    pixelSensitivity,\n    teleportDistance\n  }));\n  const mergedRef = useForkRef(scrubAreaRef, forwardedRef);\n  const {\n    renderElement\n  } = useComponentRenderer({\n    propGetter: getScrubAreaProps,\n    ref: mergedRef,\n    render: render ?? 'span',\n    state,\n    className,\n    extraProps: otherProps\n  });\n  return renderElement();\n});\nprocess.env.NODE_ENV !== \"production\" ? NumberFieldScrubArea.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * CSS class applied to the element, or a function that\n   * returns a class based on the component’s state.\n   */\n  className: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  /**\n   * Cursor movement direction in the scrub area.\n   * @default 'horizontal'\n   */\n  direction: PropTypes.oneOf(['horizontal', 'vertical']),\n  /**\n   * Determines how many pixels the cursor must move before the value changes.\n   * A higher value will make scrubbing less sensitive.\n   * @default 2\n   */\n  pixelSensitivity: PropTypes.number,\n  /**\n   * Allows you to replace the component’s HTML element\n   * with a different tag, or compose it with another component.\n   *\n   * Accepts a `ReactElement` or a function that returns the element to render.\n   */\n  render: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\n  /**\n   * If specified, determines the distance that the cursor may move from the center\n   * of the scrub area before it will loop back around.\n   */\n  teleportDistance: PropTypes.number\n} : void 0;\nexport { NumberFieldScrubArea };"],"mappings":"AAAA,YAAY;;AAEZ,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,yBAAyB,QAAQ,mCAAmC;AAC7E,SAASC,oBAAoB,QAAQ,qCAAqC;AAC1E,SAASC,UAAU,QAAQ,2BAA2B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,oBAAoB,GAAG,aAAaL,KAAK,CAACM,UAAU,CAAC,SAASD,oBAAoBA,CAACE,KAAK,EAAEC,YAAY,EAAE;EAC5G,MAAM;IACJC,MAAM;IACNC,SAAS;IACTC,SAAS,GAAG,YAAY;IACxBC,gBAAgB,GAAG,CAAC;IACpBC,gBAAgB;IAChB,GAAGC;EACL,CAAC,GAAGP,KAAK;EACT,MAAM;IACJQ,iBAAiB;IACjBC,YAAY;IACZC,cAAc;IACdC;EACF,CAAC,GAAGhB,yBAAyB,CAAC,CAAC;EAC/BF,KAAK,CAACmB,mBAAmB,CAACF,cAAc,EAAE,OAAO;IAC/CN,SAAS;IACTC,gBAAgB;IAChBC;EACF,CAAC,CAAC,CAAC;EACH,MAAMO,SAAS,GAAGhB,UAAU,CAACY,YAAY,EAAER,YAAY,CAAC;EACxD,MAAM;IACJa;EACF,CAAC,GAAGlB,oBAAoB,CAAC;IACvBmB,UAAU,EAAEP,iBAAiB;IAC7BQ,GAAG,EAAEH,SAAS;IACdX,MAAM,EAAEA,MAAM,IAAI,MAAM;IACxBS,KAAK;IACLR,SAAS;IACTc,UAAU,EAAEV;EACd,CAAC,CAAC;EACF,OAAOO,aAAa,CAAC,CAAC;AACxB,CAAC,CAAC;AACFI,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAGtB,oBAAoB,CAACuB,SAAS,CAAC,yBAAyB;EAC9F;EACA;EACA;EACA;EACA;AACF;AACA;EACEC,QAAQ,EAAE5B,SAAS,CAAC6B,IAAI;EACxB;AACF;AACA;AACA;EACEpB,SAAS,EAAET,SAAS,CAAC8B,SAAS,CAAC,CAAC9B,SAAS,CAAC+B,IAAI,EAAE/B,SAAS,CAACgC,MAAM,CAAC,CAAC;EAClE;AACF;AACA;AACA;EACEtB,SAAS,EAAEV,SAAS,CAACiC,KAAK,CAAC,CAAC,YAAY,EAAE,UAAU,CAAC,CAAC;EACtD;AACF;AACA;AACA;AACA;EACEtB,gBAAgB,EAAEX,SAAS,CAACkC,MAAM;EAClC;AACF;AACA;AACA;AACA;AACA;EACE1B,MAAM,EAAER,SAAS,CAAC8B,SAAS,CAAC,CAAC9B,SAAS,CAACmC,OAAO,EAAEnC,SAAS,CAAC+B,IAAI,CAAC,CAAC;EAChE;AACF;AACA;AACA;EACEnB,gBAAgB,EAAEZ,SAAS,CAACkC;AAC9B,CAAC,GAAG,KAAK,CAAC;AACV,SAAS9B,oBAAoB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}