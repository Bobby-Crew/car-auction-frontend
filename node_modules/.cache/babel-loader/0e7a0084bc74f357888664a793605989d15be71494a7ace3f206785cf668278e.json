{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { NumberFieldRootContext } from './NumberFieldRootContext.js';\nimport { useNumberFieldRoot } from './useNumberFieldRoot.js';\nimport { useFieldRootContext } from '../../field/root/FieldRootContext.js';\nimport { useComponentRenderer } from '../../utils/useComponentRenderer.js';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n/**\n * Groups all parts of the number field and manages its state.\n * Renders a `<div>` element.\n *\n * Documentation: [Base UI Number Field](https://base-ui.com/react/components/number-field)\n */\nconst NumberFieldRoot = /*#__PURE__*/React.forwardRef(function NumberFieldRoot(props, forwardedRef) {\n  const {\n    id,\n    min,\n    max,\n    smallStep,\n    step,\n    largeStep,\n    autoFocus,\n    required = false,\n    disabled: disabledProp = false,\n    invalid = false,\n    readOnly = false,\n    name,\n    defaultValue,\n    value,\n    onValueChange,\n    allowWheelScrub,\n    format,\n    render,\n    className,\n    ...otherProps\n  } = props;\n  const numberField = useNumberFieldRoot(props);\n  const {\n    state: fieldState,\n    disabled: fieldDisabled\n  } = useFieldRootContext();\n  const disabled = fieldDisabled || disabledProp;\n  const state = React.useMemo(() => ({\n    ...fieldState,\n    disabled,\n    invalid,\n    readOnly,\n    required,\n    value: numberField.value,\n    inputValue: numberField.inputValue,\n    scrubbing: numberField.isScrubbing\n  }), [fieldState, disabled, invalid, readOnly, required, numberField.value, numberField.inputValue, numberField.isScrubbing]);\n  const contextValue = React.useMemo(() => ({\n    ...numberField,\n    state\n  }), [numberField, state]);\n  const {\n    renderElement\n  } = useComponentRenderer({\n    ref: forwardedRef,\n    render: render ?? 'div',\n    state,\n    className,\n    extraProps: otherProps\n  });\n  return /*#__PURE__*/_jsx(NumberFieldRootContext.Provider, {\n    value: contextValue,\n    children: renderElement()\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? NumberFieldRoot.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * Whether to allow the user to scrub the input value with the mouse wheel while focused and\n   * hovering over the input.\n   * @default false\n   */\n  allowWheelScrub: PropTypes.bool,\n  /**\n   * Whether to focus the element on page load.\n   * @default false\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * CSS class applied to the element, or a function that\n   * returns a class based on the component’s state.\n   */\n  className: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  /**\n   * The uncontrolled value of the field when it’s initially rendered.\n   *\n   * To render a controlled number field, use the `value` prop instead.\n   */\n  defaultValue: PropTypes.number,\n  /**\n   * Whether the component should ignore user interaction.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Options to format the input value.\n   */\n  format: PropTypes.shape({\n    compactDisplay: PropTypes.oneOf(['long', 'short']),\n    currency: PropTypes.string,\n    currencyDisplay: PropTypes.oneOf(['code', 'name', 'narrowSymbol', 'symbol']),\n    currencySign: PropTypes.oneOf(['accounting', 'standard']),\n    localeMatcher: PropTypes.oneOf(['best fit', 'lookup']),\n    maximumFractionDigits: PropTypes.number,\n    maximumSignificantDigits: PropTypes.number,\n    minimumFractionDigits: PropTypes.number,\n    minimumIntegerDigits: PropTypes.number,\n    minimumSignificantDigits: PropTypes.number,\n    notation: PropTypes.oneOf(['compact', 'engineering', 'scientific', 'standard']),\n    numberingSystem: PropTypes.string,\n    signDisplay: PropTypes.oneOf(['always', 'auto', 'exceptZero', 'never']),\n    style: PropTypes.oneOf(['currency', 'decimal', 'percent', 'unit']),\n    unit: PropTypes.string,\n    unitDisplay: PropTypes.oneOf(['long', 'narrow', 'short']),\n    useGrouping: PropTypes.bool\n  }),\n  /**\n   * The id of the input element.\n   */\n  id: PropTypes.string,\n  /**\n   * Whether the field is forcefully marked as invalid.\n   * @default false\n   */\n  invalid: PropTypes.bool,\n  /**\n   * The large step value of the input element when incrementing while the shift key is held. Snaps\n   * to multiples of this value.\n   * @default 10\n   */\n  largeStep: PropTypes.number,\n  /**\n   * The maximum value of the input element.\n   */\n  max: PropTypes.number,\n  /**\n   * The minimum value of the input element.\n   */\n  min: PropTypes.number,\n  /**\n   * Identifies the field when a form is submitted.\n   */\n  name: PropTypes.string,\n  /**\n   * Callback fired when the number value changes.\n   * @param {number | null} value The new value.\n   * @param {Event} event The event that triggered the change.\n   */\n  onValueChange: PropTypes.func,\n  /**\n   * Whether the user should be unable to change the field value.\n   * @default false\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * Allows you to replace the component’s HTML element\n   * with a different tag, or compose it with another component.\n   *\n   * Accepts a `ReactElement` or a function that returns the element to render.\n   */\n  render: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\n  /**\n   * Whether the user must enter a value before submitting a form.\n   * @default false\n   */\n  required: PropTypes.bool,\n  /**\n   * The small step value of the input element when incrementing while the meta key is held. Snaps\n   * to multiples of this value.\n   * @default 0.1\n   */\n  smallStep: PropTypes.number,\n  /**\n   * Amount to increment and decrement with the buttons and arrow keys,\n   * or to scrub with pointer movement in the scrub area.\n   * @default 1;\n   */\n  step: PropTypes.number,\n  /**\n   * The raw numeric value of the field.\n   */\n  value: PropTypes.number\n} : void 0;\nexport { NumberFieldRoot };","map":{"version":3,"names":["React","PropTypes","NumberFieldRootContext","useNumberFieldRoot","useFieldRootContext","useComponentRenderer","jsx","_jsx","NumberFieldRoot","forwardRef","props","forwardedRef","id","min","max","smallStep","step","largeStep","autoFocus","required","disabled","disabledProp","invalid","readOnly","name","defaultValue","value","onValueChange","allowWheelScrub","format","render","className","otherProps","numberField","state","fieldState","fieldDisabled","useMemo","inputValue","scrubbing","isScrubbing","contextValue","renderElement","ref","extraProps","Provider","children","process","env","NODE_ENV","propTypes","bool","node","oneOfType","func","string","number","shape","compactDisplay","oneOf","currency","currencyDisplay","currencySign","localeMatcher","maximumFractionDigits","maximumSignificantDigits","minimumFractionDigits","minimumIntegerDigits","minimumSignificantDigits","notation","numberingSystem","signDisplay","style","unit","unitDisplay","useGrouping","element"],"sources":["/Users/bobbycrew/Documents/Uni/Second Year/Car-Auction-Site-Y2--main/Frontend/node_modules/@base-ui-components/react/esm/number-field/root/NumberFieldRoot.js"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { NumberFieldRootContext } from './NumberFieldRootContext.js';\nimport { useNumberFieldRoot } from './useNumberFieldRoot.js';\nimport { useFieldRootContext } from '../../field/root/FieldRootContext.js';\nimport { useComponentRenderer } from '../../utils/useComponentRenderer.js';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n/**\n * Groups all parts of the number field and manages its state.\n * Renders a `<div>` element.\n *\n * Documentation: [Base UI Number Field](https://base-ui.com/react/components/number-field)\n */\nconst NumberFieldRoot = /*#__PURE__*/React.forwardRef(function NumberFieldRoot(props, forwardedRef) {\n  const {\n    id,\n    min,\n    max,\n    smallStep,\n    step,\n    largeStep,\n    autoFocus,\n    required = false,\n    disabled: disabledProp = false,\n    invalid = false,\n    readOnly = false,\n    name,\n    defaultValue,\n    value,\n    onValueChange,\n    allowWheelScrub,\n    format,\n    render,\n    className,\n    ...otherProps\n  } = props;\n  const numberField = useNumberFieldRoot(props);\n  const {\n    state: fieldState,\n    disabled: fieldDisabled\n  } = useFieldRootContext();\n  const disabled = fieldDisabled || disabledProp;\n  const state = React.useMemo(() => ({\n    ...fieldState,\n    disabled,\n    invalid,\n    readOnly,\n    required,\n    value: numberField.value,\n    inputValue: numberField.inputValue,\n    scrubbing: numberField.isScrubbing\n  }), [fieldState, disabled, invalid, readOnly, required, numberField.value, numberField.inputValue, numberField.isScrubbing]);\n  const contextValue = React.useMemo(() => ({\n    ...numberField,\n    state\n  }), [numberField, state]);\n  const {\n    renderElement\n  } = useComponentRenderer({\n    ref: forwardedRef,\n    render: render ?? 'div',\n    state,\n    className,\n    extraProps: otherProps\n  });\n  return /*#__PURE__*/_jsx(NumberFieldRootContext.Provider, {\n    value: contextValue,\n    children: renderElement()\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? NumberFieldRoot.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * Whether to allow the user to scrub the input value with the mouse wheel while focused and\n   * hovering over the input.\n   * @default false\n   */\n  allowWheelScrub: PropTypes.bool,\n  /**\n   * Whether to focus the element on page load.\n   * @default false\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * CSS class applied to the element, or a function that\n   * returns a class based on the component’s state.\n   */\n  className: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  /**\n   * The uncontrolled value of the field when it’s initially rendered.\n   *\n   * To render a controlled number field, use the `value` prop instead.\n   */\n  defaultValue: PropTypes.number,\n  /**\n   * Whether the component should ignore user interaction.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Options to format the input value.\n   */\n  format: PropTypes.shape({\n    compactDisplay: PropTypes.oneOf(['long', 'short']),\n    currency: PropTypes.string,\n    currencyDisplay: PropTypes.oneOf(['code', 'name', 'narrowSymbol', 'symbol']),\n    currencySign: PropTypes.oneOf(['accounting', 'standard']),\n    localeMatcher: PropTypes.oneOf(['best fit', 'lookup']),\n    maximumFractionDigits: PropTypes.number,\n    maximumSignificantDigits: PropTypes.number,\n    minimumFractionDigits: PropTypes.number,\n    minimumIntegerDigits: PropTypes.number,\n    minimumSignificantDigits: PropTypes.number,\n    notation: PropTypes.oneOf(['compact', 'engineering', 'scientific', 'standard']),\n    numberingSystem: PropTypes.string,\n    signDisplay: PropTypes.oneOf(['always', 'auto', 'exceptZero', 'never']),\n    style: PropTypes.oneOf(['currency', 'decimal', 'percent', 'unit']),\n    unit: PropTypes.string,\n    unitDisplay: PropTypes.oneOf(['long', 'narrow', 'short']),\n    useGrouping: PropTypes.bool\n  }),\n  /**\n   * The id of the input element.\n   */\n  id: PropTypes.string,\n  /**\n   * Whether the field is forcefully marked as invalid.\n   * @default false\n   */\n  invalid: PropTypes.bool,\n  /**\n   * The large step value of the input element when incrementing while the shift key is held. Snaps\n   * to multiples of this value.\n   * @default 10\n   */\n  largeStep: PropTypes.number,\n  /**\n   * The maximum value of the input element.\n   */\n  max: PropTypes.number,\n  /**\n   * The minimum value of the input element.\n   */\n  min: PropTypes.number,\n  /**\n   * Identifies the field when a form is submitted.\n   */\n  name: PropTypes.string,\n  /**\n   * Callback fired when the number value changes.\n   * @param {number | null} value The new value.\n   * @param {Event} event The event that triggered the change.\n   */\n  onValueChange: PropTypes.func,\n  /**\n   * Whether the user should be unable to change the field value.\n   * @default false\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * Allows you to replace the component’s HTML element\n   * with a different tag, or compose it with another component.\n   *\n   * Accepts a `ReactElement` or a function that returns the element to render.\n   */\n  render: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\n  /**\n   * Whether the user must enter a value before submitting a form.\n   * @default false\n   */\n  required: PropTypes.bool,\n  /**\n   * The small step value of the input element when incrementing while the meta key is held. Snaps\n   * to multiples of this value.\n   * @default 0.1\n   */\n  smallStep: PropTypes.number,\n  /**\n   * Amount to increment and decrement with the buttons and arrow keys,\n   * or to scrub with pointer movement in the scrub area.\n   * @default 1;\n   */\n  step: PropTypes.number,\n  /**\n   * The raw numeric value of the field.\n   */\n  value: PropTypes.number\n} : void 0;\nexport { NumberFieldRoot };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}