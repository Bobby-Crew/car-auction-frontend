{"ast":null,"code":"import { getFormatter } from '../../utils/formatNumber.js';\nexport const HAN_NUMERALS = ['零', '一', '二', '三', '四', '五', '六', '七', '八', '九'];\nexport const ARABIC_NUMERALS = ['٠', '١', '٢', '٣', '٤', '٥', '٦', '٧', '٨', '٩'];\nexport const PERCENTAGES = ['%', '٪'];\nexport const ARABIC_RE = new RegExp(`[${ARABIC_NUMERALS.join('')}]`, 'g');\nexport const HAN_RE = new RegExp(`[${HAN_NUMERALS.join('')}]`, 'g');\nexport const PERCENT_RE = new RegExp(`[${PERCENTAGES.join('')}]`);\nexport function getNumberLocaleDetails(locale, options) {\n  const parts = getFormatter(locale, options).formatToParts(1111.1);\n  const result = {};\n  parts.forEach(part => {\n    result[part.type] = part.value;\n  });\n\n  // The formatting options may result in not returning a decimal.\n  getFormatter(locale).formatToParts(0.1).forEach(part => {\n    if (part.type === 'decimal') {\n      result[part.type] = part.value;\n    }\n  });\n  return result;\n}\nexport function parseNumber(formattedNumber, options) {\n  let locale;\n  if (ARABIC_RE.test(formattedNumber)) {\n    locale = 'ar';\n  } else if (HAN_RE.test(formattedNumber)) {\n    locale = 'zh';\n  }\n  const {\n    group,\n    decimal,\n    currency,\n    unit\n  } = getNumberLocaleDetails(locale, options);\n  const regexesToReplace = [{\n    regex: group ? new RegExp(`\\\\${group}`, 'g') : null,\n    replacement: ''\n  }, {\n    regex: decimal ? new RegExp(`\\\\${decimal}`, 'g') : null,\n    replacement: '.'\n  }, {\n    regex: currency ? new RegExp(`\\\\${currency}`, 'g') : null,\n    replacement: ''\n  }, {\n    regex: unit ? new RegExp(`\\\\${unit}`, 'g') : null,\n    replacement: ''\n  }, {\n    regex: ARABIC_RE,\n    replacement: match => ARABIC_NUMERALS.indexOf(match).toString()\n  }, {\n    regex: HAN_RE,\n    replacement: match => HAN_NUMERALS.indexOf(match).toString()\n  }];\n  const unformattedNumber = regexesToReplace.reduce((acc, {\n    regex,\n    replacement\n  }) => {\n    if (!regex) {\n      return acc;\n    }\n    return acc.replace(regex, replacement);\n  }, formattedNumber);\n  let num = parseFloat(unformattedNumber);\n  if (PERCENT_RE.test(formattedNumber)) {\n    num /= 100;\n  }\n  if (Number.isNaN(num)) {\n    return null;\n  }\n  return num;\n}","map":{"version":3,"names":["getFormatter","HAN_NUMERALS","ARABIC_NUMERALS","PERCENTAGES","ARABIC_RE","RegExp","join","HAN_RE","PERCENT_RE","getNumberLocaleDetails","locale","options","parts","formatToParts","result","forEach","part","type","value","parseNumber","formattedNumber","test","group","decimal","currency","unit","regexesToReplace","regex","replacement","match","indexOf","toString","unformattedNumber","reduce","acc","replace","num","parseFloat","Number","isNaN"],"sources":["/Users/bobbycrew/Documents/Uni/Second Year/Car-Auction-Site-Y2--main/Frontend/node_modules/@base-ui-components/react/esm/number-field/utils/parse.js"],"sourcesContent":["import { getFormatter } from '../../utils/formatNumber.js';\nexport const HAN_NUMERALS = ['零', '一', '二', '三', '四', '五', '六', '七', '八', '九'];\nexport const ARABIC_NUMERALS = ['٠', '١', '٢', '٣', '٤', '٥', '٦', '٧', '٨', '٩'];\nexport const PERCENTAGES = ['%', '٪'];\nexport const ARABIC_RE = new RegExp(`[${ARABIC_NUMERALS.join('')}]`, 'g');\nexport const HAN_RE = new RegExp(`[${HAN_NUMERALS.join('')}]`, 'g');\nexport const PERCENT_RE = new RegExp(`[${PERCENTAGES.join('')}]`);\nexport function getNumberLocaleDetails(locale, options) {\n  const parts = getFormatter(locale, options).formatToParts(1111.1);\n  const result = {};\n  parts.forEach(part => {\n    result[part.type] = part.value;\n  });\n\n  // The formatting options may result in not returning a decimal.\n  getFormatter(locale).formatToParts(0.1).forEach(part => {\n    if (part.type === 'decimal') {\n      result[part.type] = part.value;\n    }\n  });\n  return result;\n}\nexport function parseNumber(formattedNumber, options) {\n  let locale;\n  if (ARABIC_RE.test(formattedNumber)) {\n    locale = 'ar';\n  } else if (HAN_RE.test(formattedNumber)) {\n    locale = 'zh';\n  }\n  const {\n    group,\n    decimal,\n    currency,\n    unit\n  } = getNumberLocaleDetails(locale, options);\n  const regexesToReplace = [{\n    regex: group ? new RegExp(`\\\\${group}`, 'g') : null,\n    replacement: ''\n  }, {\n    regex: decimal ? new RegExp(`\\\\${decimal}`, 'g') : null,\n    replacement: '.'\n  }, {\n    regex: currency ? new RegExp(`\\\\${currency}`, 'g') : null,\n    replacement: ''\n  }, {\n    regex: unit ? new RegExp(`\\\\${unit}`, 'g') : null,\n    replacement: ''\n  }, {\n    regex: ARABIC_RE,\n    replacement: match => ARABIC_NUMERALS.indexOf(match).toString()\n  }, {\n    regex: HAN_RE,\n    replacement: match => HAN_NUMERALS.indexOf(match).toString()\n  }];\n  const unformattedNumber = regexesToReplace.reduce((acc, {\n    regex,\n    replacement\n  }) => {\n    if (!regex) {\n      return acc;\n    }\n    return acc.replace(regex, replacement);\n  }, formattedNumber);\n  let num = parseFloat(unformattedNumber);\n  if (PERCENT_RE.test(formattedNumber)) {\n    num /= 100;\n  }\n  if (Number.isNaN(num)) {\n    return null;\n  }\n  return num;\n}"],"mappings":"AAAA,SAASA,YAAY,QAAQ,6BAA6B;AAC1D,OAAO,MAAMC,YAAY,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;AAC9E,OAAO,MAAMC,eAAe,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;AACjF,OAAO,MAAMC,WAAW,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC;AACrC,OAAO,MAAMC,SAAS,GAAG,IAAIC,MAAM,CAAC,IAAIH,eAAe,CAACI,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC;AACzE,OAAO,MAAMC,MAAM,GAAG,IAAIF,MAAM,CAAC,IAAIJ,YAAY,CAACK,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC;AACnE,OAAO,MAAME,UAAU,GAAG,IAAIH,MAAM,CAAC,IAAIF,WAAW,CAACG,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC;AACjE,OAAO,SAASG,sBAAsBA,CAACC,MAAM,EAAEC,OAAO,EAAE;EACtD,MAAMC,KAAK,GAAGZ,YAAY,CAACU,MAAM,EAAEC,OAAO,CAAC,CAACE,aAAa,CAAC,MAAM,CAAC;EACjE,MAAMC,MAAM,GAAG,CAAC,CAAC;EACjBF,KAAK,CAACG,OAAO,CAACC,IAAI,IAAI;IACpBF,MAAM,CAACE,IAAI,CAACC,IAAI,CAAC,GAAGD,IAAI,CAACE,KAAK;EAChC,CAAC,CAAC;;EAEF;EACAlB,YAAY,CAACU,MAAM,CAAC,CAACG,aAAa,CAAC,GAAG,CAAC,CAACE,OAAO,CAACC,IAAI,IAAI;IACtD,IAAIA,IAAI,CAACC,IAAI,KAAK,SAAS,EAAE;MAC3BH,MAAM,CAACE,IAAI,CAACC,IAAI,CAAC,GAAGD,IAAI,CAACE,KAAK;IAChC;EACF,CAAC,CAAC;EACF,OAAOJ,MAAM;AACf;AACA,OAAO,SAASK,WAAWA,CAACC,eAAe,EAAET,OAAO,EAAE;EACpD,IAAID,MAAM;EACV,IAAIN,SAAS,CAACiB,IAAI,CAACD,eAAe,CAAC,EAAE;IACnCV,MAAM,GAAG,IAAI;EACf,CAAC,MAAM,IAAIH,MAAM,CAACc,IAAI,CAACD,eAAe,CAAC,EAAE;IACvCV,MAAM,GAAG,IAAI;EACf;EACA,MAAM;IACJY,KAAK;IACLC,OAAO;IACPC,QAAQ;IACRC;EACF,CAAC,GAAGhB,sBAAsB,CAACC,MAAM,EAAEC,OAAO,CAAC;EAC3C,MAAMe,gBAAgB,GAAG,CAAC;IACxBC,KAAK,EAAEL,KAAK,GAAG,IAAIjB,MAAM,CAAC,KAAKiB,KAAK,EAAE,EAAE,GAAG,CAAC,GAAG,IAAI;IACnDM,WAAW,EAAE;EACf,CAAC,EAAE;IACDD,KAAK,EAAEJ,OAAO,GAAG,IAAIlB,MAAM,CAAC,KAAKkB,OAAO,EAAE,EAAE,GAAG,CAAC,GAAG,IAAI;IACvDK,WAAW,EAAE;EACf,CAAC,EAAE;IACDD,KAAK,EAAEH,QAAQ,GAAG,IAAInB,MAAM,CAAC,KAAKmB,QAAQ,EAAE,EAAE,GAAG,CAAC,GAAG,IAAI;IACzDI,WAAW,EAAE;EACf,CAAC,EAAE;IACDD,KAAK,EAAEF,IAAI,GAAG,IAAIpB,MAAM,CAAC,KAAKoB,IAAI,EAAE,EAAE,GAAG,CAAC,GAAG,IAAI;IACjDG,WAAW,EAAE;EACf,CAAC,EAAE;IACDD,KAAK,EAAEvB,SAAS;IAChBwB,WAAW,EAAEC,KAAK,IAAI3B,eAAe,CAAC4B,OAAO,CAACD,KAAK,CAAC,CAACE,QAAQ,CAAC;EAChE,CAAC,EAAE;IACDJ,KAAK,EAAEpB,MAAM;IACbqB,WAAW,EAAEC,KAAK,IAAI5B,YAAY,CAAC6B,OAAO,CAACD,KAAK,CAAC,CAACE,QAAQ,CAAC;EAC7D,CAAC,CAAC;EACF,MAAMC,iBAAiB,GAAGN,gBAAgB,CAACO,MAAM,CAAC,CAACC,GAAG,EAAE;IACtDP,KAAK;IACLC;EACF,CAAC,KAAK;IACJ,IAAI,CAACD,KAAK,EAAE;MACV,OAAOO,GAAG;IACZ;IACA,OAAOA,GAAG,CAACC,OAAO,CAACR,KAAK,EAAEC,WAAW,CAAC;EACxC,CAAC,EAAER,eAAe,CAAC;EACnB,IAAIgB,GAAG,GAAGC,UAAU,CAACL,iBAAiB,CAAC;EACvC,IAAIxB,UAAU,CAACa,IAAI,CAACD,eAAe,CAAC,EAAE;IACpCgB,GAAG,IAAI,GAAG;EACZ;EACA,IAAIE,MAAM,CAACC,KAAK,CAACH,GAAG,CAAC,EAAE;IACrB,OAAO,IAAI;EACb;EACA,OAAOA,GAAG;AACZ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}